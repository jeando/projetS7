function d = cvMahaldist(X, Y)
% cvMahaldist - Mahalanobis distance
%
% Synopsis
%   [d] = cvMahaldist(X, Y)
%
% Description
%   Compute mahalanobis distance between X and Y.  
%
% Inputs ([]s are optional)
%   (matrix) X        D x N matrix where D is the dimension of vectors
%                     and N is the number of vectors.
%   (matrix) Y        D x P matrix where D is the dimension of vectors
%                     and P is the number of vectors.
%
% Outputs ([]s are optional)
%   (matrix) d        N x P matrix where d(n,p) represents the mahalanobis
%                     distance between X(:,n) and Y(:,p).
%
% Examples
%   X = [1 2
%        1 2];
%   Y = [1 2 3
%        1 2 3];
%   d = cvMahaldist(X, Y)
%
% See also
%   cvEucdist, pdist (statistics Toolbox), mahal (statistics toolbox)

% References
%   [1] http://en.wikipedia.org/wiki/Mahalanobis_distance
%
% Authors
%   Naotoshi Seo <sonots(at)sonots.com>
%
% License
%   The program is free to use for non-commercial academic purposes,
%   but for course works, you must understand what is going inside to use.
%   The program can be used, modified, or re-distributed for any purposes
%   if you or one of your group understand codes (the one must come to
%   court if court cases occur.) Please contact the authors if you are
%   interested in using the program without meeting the above conditions.
%
% Changes
%   06/2006  First Edition
[D N] = size(X);
[D P] = size(Y);
A = [X Y];
invcov = inv(cov(A'));
for i=1:N
    diff = repmat(X(:,i), 1, P) - Y;
    dsq(i,:) = sum((invcov*diff).*diff , 1);
end
d = sqrt(dsq);
%% Use pdist.m (Statistics Toolbox). This becomes slow. 
% [D N] = size(X);
% [D P] = size(Y);
% A = [X Y];
% % calculation of distance between X(i, :) and X(j, :) is wortheless, though
% d = squareform(pdist(A.', 'mahalanobis'));
% d = d(1:N, N+1:end); 

Description

B = repmat(A,m,n) creates a large matrix B consisting of an m-by-n tiling of copies of A. The statement repmat(A,n) creates an n-by-n tiling.

B = repmat(A,[m n]) accomplishes the same result as repmat(A,m,n).

B = repmat(A,[m n p...]) produces a multidimensional (m-by-n-by-p-by-...) array composed of copies of A. A may be multidimensional.

repmat(A,m,n) when A is a scalar, produces an m-by-n matrix filled with A's value. This can be much faster than a*ones(m,n) when m or n is large.

Examples

In this example, repmat replicates 12 copies of the second-order identity matrix, resulting in a "checkerboard" pattern.

    B = repmat(eye(2),3,4)

    B =
         1     0     1     0     1     0     1     0
         0     1     0     1     0     1     0     1
         1     0     1     0     1     0     1     0
         0     1     0     1     0     1     0     1
         1     0     1     0     1     0     1     0
         0     1     0     1     0     1     0     1 

The statement N = repmat(NaN,[2 3]) creates a 2-by-3 matrix of NaNs.
